{"remainingRequest":"C:\\Users\\ASUS\\Documents\\Software Engineering Homework\\Project3Frontend\\SEProject3FrontEnd\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\Software Engineering Homework\\Project3Frontend\\SEProject3FrontEnd\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\ASUS\\Documents\\Software Engineering Homework\\Project3Frontend\\SEProject3FrontEnd\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\Software Engineering Homework\\Project3Frontend\\SEProject3FrontEnd\\src\\views\\AddCourse.vue?vue&type=template&id=3be03d5c&scoped=true&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\Software Engineering Homework\\Project3Frontend\\SEProject3FrontEnd\\src\\views\\AddCourse.vue","mtime":1634570848998},{"path":"C:\\Users\\ASUS\\Documents\\Software Engineering Homework\\Project3Frontend\\SEProject3FrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\Software Engineering Homework\\Project3Frontend\\SEProject3FrontEnd\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1634137599133},{"path":"C:\\Users\\ASUS\\Documents\\Software Engineering Homework\\Project3Frontend\\SEProject3FrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\Software Engineering Homework\\Project3Frontend\\SEProject3FrontEnd\\node_modules\\vue-loader\\lib\\index.js","mtime":1634137599131}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}