{"remainingRequest":"/Applications/XAMPP/xamppfiles/htdocs/SE4Projects/SE-Project3/SEProject3FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/XAMPP/xamppfiles/htdocs/SE4Projects/SE-Project3/SEProject3FrontEnd/src/components/ConfirmDialog.vue?vue&type=style&index=0&id=055d7028&scoped=true&lang=css&","dependencies":[{"path":"/Applications/XAMPP/xamppfiles/htdocs/SE4Projects/SE-Project3/SEProject3FrontEnd/src/components/ConfirmDialog.vue","mtime":1634588140450},{"path":"/Applications/XAMPP/xamppfiles/htdocs/SE4Projects/SE-Project3/SEProject3FrontEnd/node_modules/css-loader/dist/cjs.js","mtime":1634955519578},{"path":"/Applications/XAMPP/xamppfiles/htdocs/SE4Projects/SE-Project3/SEProject3FrontEnd/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/SE4Projects/SE-Project3/SEProject3FrontEnd/node_modules/postcss-loader/src/index.js","mtime":1634955526187},{"path":"/Applications/XAMPP/xamppfiles/htdocs/SE4Projects/SE-Project3/SEProject3FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1634955517222},{"path":"/Applications/XAMPP/xamppfiles/htdocs/SE4Projects/SE-Project3/SEProject3FrontEnd/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5idG5zIHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBmbGV4LWRpcmVjdGlvbjogcm93OwogICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOwp9Cgoub2stYnRuIHsKICAgIGNvbG9yOiByZWQ7CiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsKICAgIGxpbmUtaGVpZ2h0OiAyLjVyZW07CiAgICBjdXJzb3I6IHBvaW50ZXI7Cn0KCi5jYW5jZWwtYnRuIHsKICAgIHBhZGRpbmc6IDAuNWVtIDFlbTsKICAgIGJhY2tncm91bmQtY29sb3I6ICNkNWVhZTc7CiAgICBjb2xvcjogIzM1OTA3ZjsKICAgIGJvcmRlcjogMnB4IHNvbGlkICMwZWM1YTQ7CiAgICBib3JkZXItcmFkaXVzOiA1cHg7CiAgICBmb250LXdlaWdodDogYm9sZDsKICAgIGZvbnQtc2l6ZTogMTZweDsKICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7CiAgICBjdXJzb3I6IHBvaW50ZXI7Cn0K"},{"version":3,"sources":["ConfirmDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ConfirmDialog.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <popup-modal ref=\"popup\">\n        <h2 style=\"margin-top: 0\">{{ title }}</h2>\n        <p>{{ message }}</p>\n        <div class=\"btns\">\n            <button class=\"cancel-btn\" @click=\"_cancel\">{{ cancelButton }}</button>\n            <span class=\"ok-btn\" @click=\"_confirm\">{{ okButton }}</span>\n        </div>\n    </popup-modal>\n</template>\n\n<script>\nimport PopupModal from './PopupModal.vue'\n\nexport default {\n    name: 'ConfirmDialog',\n\n    components: { PopupModal },\n\n    data: () => ({\n        // Parameters that change depending on the type of dialogue\n        title: undefined,\n        message: undefined, // Main text content\n        okButton: undefined, // Text for confirm button; leave it empty because we don't know what we're using it for\n        cancelButton: 'Go Back', // text for cancel button\n        \n        // Private variables\n        resolvePromise: undefined,\n        rejectPromise: undefined,\n    }),\n\n    methods: {\n        show(opts = {}) {\n            this.title = opts.title\n            this.message = opts.message\n            this.okButton = opts.okButton\n            if (opts.cancelButton) {\n                this.cancelButton = opts.cancelButton\n            }\n            // Once we set our config, we tell the popup modal to open\n            this.$refs.popup.open()\n            // Return promise so the caller can get results\n            return new Promise((resolve, reject) => {\n                this.resolvePromise = resolve\n                this.rejectPromise = reject\n            })\n        },\n\n        _confirm() {\n            this.$refs.popup.close()\n            this.resolvePromise(true)\n        },\n\n        _cancel() {\n            this.$refs.popup.close()\n            this.resolvePromise(false)\n            // Or you can throw an error\n            // this.rejectPromise(new Error('User cancelled the dialogue'))\n        },\n    },\n}\n</script>\n\n<style scoped>\n.btns {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n}\n\n.ok-btn {\n    color: red;\n    text-decoration: underline;\n    line-height: 2.5rem;\n    cursor: pointer;\n}\n\n.cancel-btn {\n    padding: 0.5em 1em;\n    background-color: #d5eae7;\n    color: #35907f;\n    border: 2px solid #0ec5a4;\n    border-radius: 5px;\n    font-weight: bold;\n    font-size: 16px;\n    text-transform: uppercase;\n    cursor: pointer;\n}\n</style>"]}]}